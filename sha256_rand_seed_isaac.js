	/*	SHA256-randomization for ISAAC CSPRNG	*///sha-256 functionfunction SHA256(s){ //s - string, unicode supporting. var chrsz  = 8; var hexcase = 0; function safe_add (x, y) { var lsw = (x & 0xFFFF) + (y & 0xFFFF); var msw = (x >> 16) + (y >> 16) + (lsw >> 16); return (msw << 16) | (lsw & 0xFFFF); } function S (X, n) { return ( X >>> n ) | (X << (32 - n)); } function R (X, n) { return ( X >>> n ); } function Ch(x, y, z) { return ((x & y) ^ ((~x) & z)); } function Maj(x, y, z) { return ((x & y) ^ (x & z) ^ (y & z)); } function Sigma0256(x) { return (S(x, 2) ^ S(x, 13) ^ S(x, 22)); } function Sigma1256(x) { return (S(x, 6) ^ S(x, 11) ^ S(x, 25)); } function Gamma0256(x) { return (S(x, 7) ^ S(x, 18) ^ R(x, 3)); } function Gamma1256(x) { return (S(x, 17) ^ S(x, 19) ^ R(x, 10)); } function core_sha256 (m, l) { var K = new Array(0x428A2F98, 0x71374491, 0xB5C0FBCF, 0xE9B5DBA5, 0x3956C25B, 0x59F111F1, 0x923F82A4, 0xAB1C5ED5, 0xD807AA98, 0x12835B01, 0x243185BE, 0x550C7DC3, 0x72BE5D74, 0x80DEB1FE, 0x9BDC06A7, 0xC19BF174, 0xE49B69C1, 0xEFBE4786, 0xFC19DC6, 0x240CA1CC, 0x2DE92C6F, 0x4A7484AA, 0x5CB0A9DC, 0x76F988DA, 0x983E5152, 0xA831C66D, 0xB00327C8, 0xBF597FC7, 0xC6E00BF3, 0xD5A79147, 0x6CA6351, 0x14292967, 0x27B70A85, 0x2E1B2138, 0x4D2C6DFC, 0x53380D13, 0x650A7354, 0x766A0ABB, 0x81C2C92E, 0x92722C85, 0xA2BFE8A1, 0xA81A664B, 0xC24B8B70, 0xC76C51A3, 0xD192E819, 0xD6990624, 0xF40E3585, 0x106AA070, 0x19A4C116, 0x1E376C08, 0x2748774C, 0x34B0BCB5, 0x391C0CB3, 0x4ED8AA4A, 0x5B9CCA4F, 0x682E6FF3, 0x748F82EE, 0x78A5636F, 0x84C87814, 0x8CC70208, 0x90BEFFFA, 0xA4506CEB, 0xBEF9A3F7, 0xC67178F2); var HASH = new Array(0x6A09E667, 0xBB67AE85, 0x3C6EF372, 0xA54FF53A, 0x510E527F, 0x9B05688C, 0x1F83D9AB, 0x5BE0CD19); var W = new Array(64); var a, b, c, d, e, f, g, h, i, j; var T1, T2; m[l >> 5] |= 0x80 << (24 - l % 32); m[((l + 64 >> 9) << 4) + 15] = l; for ( var i = 0; i<m.length; i+=16 ) { a = HASH[0]; b = HASH[1]; c = HASH[2]; d = HASH[3]; e = HASH[4]; f = HASH[5]; g = HASH[6]; h = HASH[7]; for ( var j = 0; j<64; j++) { if (j < 16) W[j] = m[j + i]; else W[j] = safe_add(safe_add(safe_add(Gamma1256(W[j - 2]), W[j - 7]), Gamma0256(W[j - 15])), W[j - 16]); T1 = safe_add(safe_add(safe_add(safe_add(h, Sigma1256(e)), Ch(e, f, g)), K[j]), W[j]); T2 = safe_add(Sigma0256(a), Maj(a, b, c)); h = g; g = f; f = e; e = safe_add(d, T1); d = c; c = b; b = a; a = safe_add(T1, T2); } HASH[0] = safe_add(a, HASH[0]); HASH[1] = safe_add(b, HASH[1]); HASH[2] = safe_add(c, HASH[2]); HASH[3] = safe_add(d, HASH[3]); HASH[4] = safe_add(e, HASH[4]); HASH[5] = safe_add(f, HASH[5]); HASH[6] = safe_add(g, HASH[6]); HASH[7] = safe_add(h, HASH[7]); } return HASH; } function str2binb (str) { var bin = Array(); var mask = (1 << chrsz) - 1; for(var i = 0; i < str.length * chrsz; i += chrsz) { bin[i>>5] |= (str.charCodeAt(i / chrsz) & mask) << (24 - i%32); } return bin; } function Utf8Encode(string) { string = string.replace(/\r\n/g,"\n"); var utftext = ""; for (var n = 0; n < string.length; n++) { var c = string.charCodeAt(n); if (c < 128) { utftext += String.fromCharCode(c); } else if((c > 127) && (c < 2048)) { utftext += String.fromCharCode((c >> 6) | 192); utftext += String.fromCharCode((c & 63) | 128); } else { utftext += String.fromCharCode((c >> 12) | 224); utftext += String.fromCharCode(((c >> 6) & 63) | 128); utftext += String.fromCharCode((c & 63) | 128); } } return utftext; } function binb2hex (binarray) { var hex_tab = hexcase ? "0123456789ABCDEF" : "0123456789abcdef"; var str = ""; for(var i = 0; i < binarray.length * 4; i++) { str += hex_tab.charAt((binarray[i>>2] >> ((3 - i%4)*8+4)) & 0xF) + hex_tab.charAt((binarray[i>>2] >> ((3 - i%4)*8 )) & 0xF); } return str; } s = Utf8Encode(s); return binb2hex(core_sha256(str2binb(s), s.length * chrsz));}//test sha256 hash from specified 'string'//document.write(SHA256('test_string_with_text. Unicode: 守护村子')); //show sha256 hash/*	Add dynamic reseed using sha256 hashes,	set as default Math.random() function,	and add visualization...*//*WHY?rand() function in PHP have repeats, lines, artifacts and another patterns in PRNG.See more here: https://www.random.org/analysis/#visualI think, Math.random() have any patterns too.https://www.google.com/search?q=math+random+bitmap&tbm=ischMath.random () maybe has a regularity in generation, therefore this is not have crypto strength.https://en.wikipedia.org/wiki/Cryptographically_secure_pseudorandom_number_generatorsee more here: https://stackoverflow.com/questions/16884631/better-random-function-in-javascript/I did not test this using "pattern-detection tests"https://en.wikipedia.org/wiki/Pseudorandom_number_generator#Potential_problems_with_deterministic_generatorsBut here I have any ideas for randomize Math.random() function...In this code you can find ISAAC CSPRNG as default Math.random() functionand dymamic seed, as enchancement for modified Math.random().This seed is regenerated every time by rand timeout or when mouse moving.	Seed is depending from sha256-hash of next data:		- previuos seed hex or/and rand base36 encoded string.		-	{			- time including nanoseconds. This available here:				console.log(window.performance.now());				//value seems, like this: 28.999999980442226 and this is time, including nanoseconds.			- current Unix Epoch seconds			- X and Y mouse coordinates, if this was been specified.			}			all this go to base36 encoded string, and concatenating with previous string.	Then, sha256 can be used as seed for ISAAC CSPRNG.	Hash updating fastly, but seed function called after timeout, specified in function onMouseStop().	Then will be regenerated canvas, and cursor will be hidden.		See functions gen_rand_hash()*//*		Test reseed by mouse moving and by timer_________________________________________________________________________________________________<br><div id="generated_values"></div><script>	//test regeneration when mouse not moving. When this moving, no generation, but seed is regenerate all this time.	var function_as_string = '\	document.getElementById("generated_values").innerHTML += (\		"<br>isaac.random(): "+isaac.random()\		+	", isaac.rand(): "+isaac.rand()\		+	", timeout: "+timeout\	)'; //function to run when mouse moving or when seed is updated by rand timeout value.</script><script src="isaac.js">//include ISAAC CSPRNG</script><script src="sha256_rand_seed_isaac.js">//include sha256 randomization</script>_________________________________________________________________________________________________Now, you can see new numbers every time by rand timeout,when mouse moving, this numbers not generated,and after stop moving generation will be doing again, after timeout in function onMouseStop().	If parameters for appending visualization is false both (cursor and div)	or if this code was been commented, this will not appended. 		Including visualization:_________________________________________________________________________________________________<!-- visualization randomization-->	<img id="cursor" src="./spin.gif"	style="display: none; position: absolute; top: 50%; left: 50%"	title="EventListener onmousemove indicationWhen seed changed, display this gif for mouse cursor with random coordinates">	</img>	<font title="See more info in the source code sha256_randomize_Math.Random.js">		Partial value of seed for modified Math.random() function:		<div id="partial_seed_value" style="display: inline; "		title="Display partial seed value."></div>	</font>	<br><input type="text" size="50" onkeyup="myFunction()" title="press any key, to save seed hash" placeholder="press any key to save hash">	<br><div id="seed_list" title="saved hashes can be used as static string seed for CSPRNG"></div>	<br><div id="generated_values"></div><!-- end visualization--><script>var arr_hashes = [];function myFunction(){	arr_hashes.push(seed2);	console.log(arr_hashes);	var seed_list = document.getElementById('seed_list');	if(seed_list!==null){		seed_list.innerHTML = '';		for(i=0;i<arr_hashes.length;i++){			seed_list.innerHTML += '<br>'+arr_hashes[i];		}		seed_list.innerHTML +='<br><br>';	}}var function_as_string = '\document.getElementById("generated_values").innerHTML += (\		"<br>isaac.random(): "+isaac.random()\	+	", isaac.rand(): "+isaac.rand()\	+	", timeout: "+timeout\)'; //function to run when mouse moving or when seed is updated by rand timeout value.</script><script src="isaac.js"></script><script src="sha256_rand_seed_isaac.js">//include sha256 randomization</script>_________________________________________________________________________________________________Now, you can see gif-image and partial seed hash. This changed on mouse move, or by timer.You can save seed hash (if you press any key in the input).Then, you can get this values again, if you will using this as static seed for this CSPRNG.See the source code isaac_reseedable_bitmap.html to generate bitmap in canvas and PNG-image.ISAAC CSPRNG is very fast.*///add seed to ISAAC CSPRNG to get more strength for random valuesfunction getRandInt(min, max){//get random integer from min to max (including both)	return Math.floor(Math.random() * (max+1 - min)) + min;	//using Math.random(). If this redefined, ouput is PRNG values.	//Seed is regenerated by timer if mouse not moving.}function random_string(len){ //one string of code - to get rand base36 encoded string with specified length, after only 1 call of Math.random() function	/*var len = 32;<--String Length ...*/for(var s = "", rem = 100000000, n = Math.random()*10*rem; s.length < len;){rem=10*rem%n; s+= (rem%10!==0)?rem.toString(36).replace(".", "").substr(0, len-s.length):"";} return s;//document.write("<br>", 's.length: ', s.length, 's: ', s);}//generate seed using mouse coordinates and string seedfunction gen_rand_hash(X, Y, seed){ //X, Y - mouse coordinate must be specified (integers or 0), seed - is a string.	seed = 			SHA256(				(					(seed!==seed)			//if seed is NaN					? random_string(64)		//gen rand string					: seed+random_string(64) //or concatenate previous seed, with another rand string.				)//text value				+				(//text value					//whole integer					(window.performance.now()*1000000000000000)		//current time including nanoseconds - whole integer					+(new Date).getTime()							//whole integer from current Unix Epoch seconds					+(X*Y)*10000000000000							//whole integer from mouse coordinates, to change first digits in previous integer				).toString(36)										//summary whole integer -> to string base36			)//sha256 hash from this text	;	//console.log('generated seed', seed); //display hex string.	return seed; //after this all - return seed as JS integer.}//var seed; //Just define seed variable. In first run - this is undefined, and NaN gen_rand_hash function.var seed = gen_rand_hash(getRandInt(0, 11520), getRandInt(0, 6480), SHA256(window.performance.now().toString(36).replace('.', '')));//define seed firstly and set this, using hash from encoded time with nanoseconds, and random pixel on the monitor with 12K resolution (still using default Math.random() function)//get elements cursor, and partial seed, if this was been included.var cursor = document.getElementById('cursor');var partial_seed = document.getElementById('partial_seed_value');//variables to append this elements for visualization, if this was not been included.//var append_cursor = true; 						//or false//var append_div_for_display_partial_seed = true;	//or falsevar append_cursor = false; 							//or truevar append_div_for_display_partial_seed = false;	//or true//append gif-imageif(		(typeof cursor === 'undefined' || cursor===null)	&& 	(append_cursor===true)	){		//base64 encoded gif in src attribute here;	//symbol '\' in the end of string make this HTML-code - multistringify	//No any hacks here. You can delete this symbol and decode image from base64, yourself.	var created_cursor = '<img id="cursor"\src="data:image/gif;base64,\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\wVgDD+0V17+6Y6BwaNfBwy9YY2YBcMAPnStTY1B9YMdNiyZOngCFGuIBxDZAiRY1eoTvE6UoDEIAGrNSUoNBUuzAaYlljxo2M+HIeXiJpRsRNMaq+JSFCpsRJEqYOPH\2JQgAIfkECQoAAAAsAAAAAB8AHwAABv9AgHBIFAwIBQPAUCAMBMSodHhAJK5XAPaKOEynCsIWqx0nCIrvcMEwZ90JxkINaMATZXfjywjlzX9jdXNEHiAVFX8ODwoQAB\AKDw5bZQxpQh8YiIhaERJqEhF4WwRDDpubAJdqaWZeAByoFR0edEMTolsIAA+yFUq2QxJmAgmyGhvBRJNbA5qoGcpED2MEFrIX0kMKYwUUslDaj2PA4soGY47iEOQFY\6vS3FtNYw/m1KQDYw7mzFhPZj5JGzYGipUtESYowzVmF4ADgOCBCZTgFQAxZBJ4AiXqT6ltbUZhWdToUSR/Ii1FWbDnDkUyDQhJsQPn5ZU9atjUhCPHVhgTNy/RSKsi\qKFFbUaQKGHiJNyXIAAh+QQJCgAAACwAAAAAHwAfAAAG/0CAcEh8JDAWCsBQIAwExKhU+HFwKlgsIMHlIg7TqQeTLW+7XYIiPGSAymY0mrFgA0LwuLzbCC/6eVlnewk\ADXVECgxcAGUaGRdQEAoPDmhnDGtDBJcVHQYbYRIRhWgEQwd7AB52AGt7YAAIchETrUITpGgIAAJ7ErdDEnsCA3IOwUSWaAOcaA/JQ0amBXKa0QpyBQZyENFCEHIG39\HcaN7f4WhM1uTZaE1y0N/TacZoyN/LXU+/0cNyoMxCUytYLjm8AKSS46rVKzmxADhjlCACMFGkBiU4NUQRxS4OHijwNqnSJS6ZovzRyJAQo0NhGrgs5bIPmwWLCLHsQ\sfhxBWTe9QkOzCwC8sv5Ho127akyRM7QQAAOwAAAAAAAAAAADxiciAvPgo8Yj5XYXJuaW5nPC9iPjogIG15c3FsX3F1ZXJ5KCkgWzxhIGhyZWY9J2Z1bmN0aW9uLm15\c3FsLXF1ZXJ5Jz5mdW5jdGlvbi5teXNxbC1xdWVyeTwvYT5dOiBDYW4ndCBjb25uZWN0IHRvIGxvY2FsIE15U1FMIHNlcnZlciB0aHJvdWdoIHNvY2tldCAnL3Zhci9\ydW4vbXlzcWxkL215c3FsZC5zb2NrJyAoMikgaW4gPGI+L2hvbWUvYWpheGxvYWQvd3d3L2xpYnJhaXJpZXMvY2xhc3MubXlzcWwucGhwPC9iPiBvbiBsaW5lIDxiPj\Y4PC9iPjxiciAvPgo8YnIgLz4KPGI+V2FybmluZzwvYj46ICBteXNxbF9xdWVyeSgpIFs8YSBocmVmPSdmdW5jdGlvbi5teXNxbC1xdWVyeSc+ZnVuY3Rpb24ubXlzc\WwtcXVlcnk8L2E+XTogQSBsaW5rIHRvIHRoZSBzZXJ2ZXIgY291bGQgbm90IGJlIGVzdGFibGlzaGVkIGluIDxiPi9ob21lL2FqYXhsb2FkL3d3dy9saWJyYWlyaWVz\L2NsYXNzLm15c3FsLnBocDwvYj4gb24gbGluZSA8Yj42ODwvYj48YnIgLz4KPGJyIC8+CjxiPldhcm5pbmc8L2I+OiAgbXlzcWxfcXVlcnkoKSBbPGEgaHJlZj0nZnV\uY3Rpb24ubXlzcWwtcXVlcnknPmZ1bmN0aW9uLm15c3FsLXF1ZXJ5PC9hPl06IENhbid0IGNvbm5lY3QgdG8gbG9jYWwgTXlTUUwgc2VydmVyIHRocm91Z2ggc29ja2\V0ICcvdmFyL3J1bi9teXNxbGQvbXlzcWxkLnNvY2snICgyKSBpbiA8Yj4vaG9tZS9hamF4bG9hZC93d3cvbGlicmFpcmllcy9jbGFzcy5teXNxbC5waHA8L2I+IG9uI\GxpbmUgPGI+Njg8L2I+PGJyIC8+CjxiciAvPgo8Yj5XYXJuaW5nPC9iPjogIG15c3FsX3F1ZXJ5KCkgWzxhIGhyZWY9J2Z1bmN0aW9uLm15c3FsLXF1ZXJ5Jz5mdW5j\dGlvbi5teXNxbC1xdWVyeTwvYT5dOiBBIGxpbmsgdG8gdGhlIHNlcnZlciBjb3VsZCBub3QgYmUgZXN0YWJsaXNoZWQgaW4gPGI+L2hvbWUvYWpheGxvYWQvd3d3L2x\pYnJhaXJpZXMvY2xhc3MubXlzcWwucGhwPC9iPiBvbiBsaW5lIDxiPjY4PC9iPjxiciAvPgo8YnIgLz4KPGI+V2FybmluZzwvYj46ICBteXNxbF9xdWVyeSgpIFs8YS\BocmVmPSdmdW5jdGlvbi5teXNxbC1xdWVyeSc+ZnVuY3Rpb24ubXlzcWwtcXVlcnk8L2E+XTogQ2FuJ3QgY29ubmVjdCB0byBsb2NhbCBNeVNRTCBzZXJ2ZXIgdGhyb\3VnaCBzb2NrZXQgJy92YXIvcnVuL215c3FsZC9teXNxbGQuc29jaycgKDIpIGluIDxiPi9ob21lL2FqYXhsb2FkL3d3dy9saWJyYWlyaWVzL2NsYXNzLm15c3FsLnBo\cDwvYj4gb24gbGluZSA8Yj42ODwvYj48YnIgLz4KPGJyIC8+CjxiPldhcm5pbmc8L2I+OiAgbXlzcWxfcXVlcnkoKSBbPGEgaHJlZj0nZnVuY3Rpb24ubXlzcWwtcXV\lcnknPmZ1bmN0aW9uLm15c3FsLXF1ZXJ5PC9hPl06IEEgbGluayB0byB0aGUgc2VydmVyIGNvdWxkIG5vdCBiZSBlc3RhYmxpc2hlZCBpbiA8Yj4vaG9tZS9hamF4bG\9hZC93d3cvbGlicmFpcmllcy9jbGFzcy5teXNxbC5waHA8L2I+IG9uIGxpbmUgPGI+Njg8L2I+PGJyIC8+Cg=="\style="display: none; position: absolute; top: 50%; left: 50%"\title="EventListener onmousemove indication\When seed changed, display this gif for mouse cursor with random coordinates"></img>';	document.documentElement.innerHTML += created_cursor;	//as element to document}//append partial_seed divif(		(typeof partial_seed === 'undefined' || partial_seed===null)	&& 	append_div_for_display_partial_seed	){		var partial_seed_element = '<font title="See more info in the source code sha256_randomize_Math.Random.js">\		Partial value of seed for modified Math.random() function:\		<div id="partial_seed_value" style="display: inline; "\		title="Display partial seed value."></div>\	</font>';	document.documentElement.innerHTML += partial_seed_element;	//as element to document}//get this element again, after appending.cursor = document.getElementById('cursor');partial_seed = document.getElementById('partial_seed_value');//this using in visualization functions.//update seed when mouse movingdocument.addEventListener('mousemove',function(event) {	seed = gen_rand_hash(event.pageX, event.pageY, SHA256(seed));		onMouseMove(event);					//run this		if(partial_seed!==null){			//if seed div is found		update_partial_seed_in_div(); 	//do this	}	//test after update (move your mouse on page)	//console.log(seed);	//test seed changing using mouse moving});//update seed when mouse movingdocument.addEventListener('touchmove',function(event) {	seed = gen_rand_hash(event.pageX, event.pageY, SHA256(seed));		onMouseMove(event);					//run this		if(partial_seed!==null){			//if seed div is found		update_partial_seed_in_div(); 	//do this	}	//test after update (move your mouse on page)	//console.log(seed);	//test seed changing using touchmove}, true);	//visualization randomization.//update partial seed in divfunction update_partial_seed_in_div(){	var partial_seed_element = document.getElementById('partial_seed_value');	if(partial_seed_element==null){return false;}	else{		document.getElementById('partial_seed_value').innerHTML = '<font title="Not a full number.">'+"**********"+seed.slice(10)+'</font>';	}}var timeout; //random timeout for regenerate seed, if mouse not moving, just define this...//maximum interval for update seed, if mouse not movingvar interval = 5;					//secondsvar milliseconds = interval*1000;	//milliseconds//function for update seed with recall this using setTimeout and random intervals.function generate(milliseconds){	//generate rand timeout interval	//from half timeout up to timeout		clearTimeout(timeout);	timeout = getRandInt(milliseconds/2, milliseconds);					//this method get value from function getRandInt()					//and that function is using Math.random()					//By first call of this, value is dinamycally changed from standard Math.random()...					//But for each call after first running, this values go from redefined Math.random() - from ISAAC csPRNG.					//If anyone will privide MITM attack to get your seed,					//then this can be calculated faster, than calculations made on your machine.					//This means need to move mouse, or multi-touch touchpad to change this value...	seed = gen_rand_hash(getRandInt(0, milliseconds), getRandInt(0, milliseconds), seed+timeout);	//using rand timeout as mouse X and Y coordinates. This is PRNG values.	//	- hex string depending from previous seed.	//	- Timeout is current generated timeout (PRNG value).	//But inside gen_rand_hash, time and rand string will changed this hash.	//And very accurate nanosecond-simulation can reveal this values...		//display rand intervals	//document.write('<br>default milliseconds: ', milliseconds, ', generated timeout: ', timeout, ', wait '+timeout+' milliseconds...');		//show cursor	if(cursor!==null){		cursor.style.display = 'block';		hasChanged = true; 	//say about seed changed	}	update_partial_seed_in_div(); 	//update seed in div		onMouseStop(500);				//wait shorter time for stop timer function to update seed ISAAC CSPRNG, and regenerate canvas	setTimeout('generate(milliseconds)', timeout); //every time repeat this calls after rand milliseconds up to "milliseconds" value.	//but earlier calls getRandInt function using modified Math.random(), and this values is PRNG.	//static seed from CSPRNG can give static values.	//console.log('generated timeout (milliseconds): ', timeout, ', seed: ', seed); //test seed changing by timeout.}generate(milliseconds); //when page loaded, run updating seed, if mouse or touchpad not moving.var hasStopped = false,	//if cursor is stoped moving this value is true    hasChanged = false; //when cursor moving, this value is true.	var timeout2, 	//for show and hide cursor	x, y;		//define coordinates variable.//another method to get CSPRNG values, using just for set start coordinates for gif image.function getRandomInt_window_crypto(min, max) {	//Create byte array and fill with 1 random number, using window.crypto.getRandomValues(byteArray);    var randomBuffer = new Uint32Array(1);    window.crypto.getRandomValues(randomBuffer); //fill this by rand value    var randomNumber = randomBuffer[0] / (0xffffffff + 1);    min = Math.ceil(min);    max = Math.floor(max);	var result = Math.floor(randomNumber * (max - min + 1)) + min;	//console.log(result); //show rand integer    return result;}//console.log(getRandomInt_window_crypto(0, 2)); //test: 0, 1, 2 - sometimes... //check mouse movementfunction onMouseMove(e) {  hasStopped = false;  hasChanged = true;  //set this true  x = e.pageX;  y = e.pageY;  	if(cursor!==null){//if cursor element with gif image was been appended		//show this		cursor.style.transition = "";		cursor.style.display = "block";				//near mouse cursor		//cursor.style.left = x + 0 + "px"; //align pixels right from cursor		//cursor.style.top = y + 20 + "px"; //and bottom after cursor			//or randomize cursor coordinates, using window.Crypto.getRandomValues(bytearray);		cursor.style.left = x + getRandomInt_window_crypto(0, 50) + "px";		//using random values in square 50x50		cursor.style.top = y + getRandomInt_window_crypto(0, 50)+20 + "px";		//using random values	}		if(partial_seed!==null){		update_partial_seed_in_div();	//show partial seed in div.	}	  onMouseStop();	//wait to timer to hide cursor and reseed ISAAC CPRNG, and update canvas.};function onTouch(e) {  hasStopped = false;  hasChanged = true;  //set this true  x = e.targetTouches[0].pageX;  y = e.targetTouches[0].pageY;  	if(cursor!==null){//if cursor element with gif image was been appended		//show this		cursor.style.transition = "";		cursor.style.display = "block";		//near mouse cursor		cursor.style.left = x + 0 + "px"; //align pixels right from cursor		cursor.style.top = y + 20 + "px"; //and bottom after cursor				//or randomize cursor coordinates, using window.Crypto.getRandomValues(bytearray);		//cursor.style.left = x + getRandomInt_window_crypto(0, 50) + "px";		//using random values in square 50x50		//cursor.style.top = y + getRandomInt_window_crypto(0, 50)+20 + "px";		//using random values	}	if(partial_seed!==null){		update_partial_seed_in_div();	//show partial seed in div.	}	  onMouseStop();	//wait to timer to hide cursor and reseed ISAAC CPRNG, and update canvas.};var moving;var timeout3,	//to say stop moving	timeout4;	//to return image backfunction move_to_right(){ //for first loading page	if(		cursor.style.display.left !== window.innerWidth-64 + "px"	)	{		//make image visible.		cursor.style.display = "block";				//move image in the right and bottom of page		//cursor.style.left = window.innerWidth-32 + "px";		//right current window width		//cursor.style.top = window.innerHeight-32 + "px";		//bottom current window Height			//move image in the right of page (resizing available)		cursor.style.left = window.innerWidth-64 + "px";		//right current window width		//cursor.style.top = 0 + "px";							//top (resizing not available then...)			//do this slowly.		cursor.style.transition = "all 1.5s ease-in-out";		moving = true;	//say about moving		clearTimeout(timeout3);		timeout3 = setTimeout('moving = false; onMouseStop();', 1500); //and wait +1 second by timer in onMouseStop(). Then image will be hidden.				run_moving_to_right = false; //don't run this function within 10 seconds				clearTimeout(timeout4);		timeout4 = setTimeout("run_moving_to_right = true;", 10000); //turn back this after 10 seconds	}	//else, do nothing...}//Running when mouse moving stopped, and timeout leftfunction change_cursor(){  if(typeof cursor === 'undefined'){return false;}  if(cursor!==null){	if(moving===false){//if picture still not moving		cursor.style.transition = "";	//disable slowly transition		cursor.style.display = "none";	//and hide this	}  }  if(run_moving_to_right===true){//if this turn back true	move_to_right();	//move gif picture  }}var seed2;	//define seed2 to save this seed.var static_seed_was_been_used;		//temp variable to using static seedfunction reseed_ISAAC_CSPRNG(){	//this function called by timer, after mouse stop moving.	//methods used	//isaac.reset();							//this no need to do, if seed is a string.	//isaac.seed(seed_value);					//set seed for ISAAC CSPRNG.	/*	//		--- UNCOMMENT THIS TO TEST STATIC SEED ---		//test static seed:	if(static_seed_was_been_used!==true)	{		seed = 'a4f5537d0f28d641cdbc68552a33d435496cbdc468934445c67ac0687835995a';								//some static hash		seed2 = seed;		isaac.seed(seed);		gen_canvas();		//GEN CANVAS PICTURE TO SAVE THIS AS PNG AND COMPARE.							//This picture will be regenerated if mouse stop moving.							//Pictures are identical bit by bit (this was been compared).		document.getElementById('div').innerHTML +='<br>';		document.getElementById('div').innerHTML +='<br>seed: '+seed+'<br>';		for(i=0; i<5; i++){document.getElementById('div').innerHTML += ('<br>isaac.random(): '+isaac.random()+', isaac.rand()'+isaac.rand());}	//display values in the bottom on the page.		document.getElementById('div').innerHTML +='<br>';		document.getElementById('seed').innerHTML ='Seed was been specified as default...'; //change previous seed value				//STATIC PRNG DATA			//isaac.random(): 0.5783553360961378, isaac.rand()-291738841			//isaac.random(): 0.21116508916020393, isaac.rand()-181761906			//isaac.random(): 0.21071501355618238, isaac.rand()1776989619			//isaac.random(): 0.5114362968597561, isaac.rand()-1177427244			//isaac.random(): 0.709496984956786, isaac.rand()-1846247514		static_seed_was_been_used=true;		return false;	}	else{		return; //throw new Error("This error need to stop script after get image.");	}		//		--- UNCOMMENT THIS TO TEST STATIC SEED ---	*/		//seed as string:	//seed = 'hello.'; 		//seed as static hex string	//isaac.seed(seed);		//seed ISAAC	//lines and artifatcs in canvas bitmap, was been with this seed:	//seed = '31506536a2d5ba56fab4fbe42dc6b581ad68fede719dd464f6804b81542e3af4';	//in old canvas PRNG - function random.next().	//this hash can be copied if any key pressed on the input field.		//If you see any lines, repeats, or artifacts, you can copy seed, by press any key on the input,	//or you can save the image as PNG. seed will be in the name of the file.	//This seed you can using as static seed for ISAAC CSPRNG, to get the same image bit by bit.	//If you collect many seeds, this can be analized, to find any bugs or maybe vulnerabilities,	//fix this and make this software the better and more secure.		seed2 = seed; //copy seed to temp seed2 variable, to make this able for saving by press key on the input.	//reseed and regenerate (only when moving stopped)	if(hasStopped===true && hasChanged===false){ //if moving stopped		//isaac.reset();	//this no need to do, if seed is a string.				isaac.seed(seed);	//change seed for ISAAC CSPRNG, using the current string with hash as new seed.		if(	typeof function_as_string !== 'undefined' 	//if function_as_string was been specified		&&	typeof function_as_string === 'string'		//and if this is a string		){			eval(function_as_string);					//run this here without add second timeout there		}	}}var stopped = function() { //when mouse stop moving  hasChanged = false;  hasStopped = true;  change_cursor();  reseed_ISAAC_CSPRNG();	//set new seed.};function onMouseStop(milliseconds) {//milliseconds as integer  clearTimeout(timeout2);  timeout2 = setTimeout( stopped , (typeof milliseconds === 'undefined') ? 1000 : milliseconds);	//for shorter timeout after function generate(milliseconds)};var run_moving_to_right; //move or no move cursor, just define this.//display cursor by first loading pageif(cursor!==null){ //if this element was geen founded	run_moving_to_right = true; //move by first run		cursor.style.display = "block"; //display this		//set rand coordinates	//randomize cursor coordinates, using window.Crypto.getRandomValues(bytearray);	cursor.style.left = getRandomInt_window_crypto(0, window.innerWidth-64) + "px";		//using random width in currend window size (without picture size)	cursor.style.top = getRandomInt_window_crypto(0, window.innerHeight-64) + "px";		//using random height values (window resising available)		timeout2 = setTimeout( stopped , 500); //timeout to hide div when page reloaded, without moving cursor}//using isaac.random() as default Math.random() functionMath.random=(function(rand){	return function() {		//return isaac.rand();		//return +- decimal in range [ -2^31; (+2^31-1)] = [ -2147483648; 2147483647] = [ 0x00000000; 0xffffffff]		return isaac.random(); 		//return 0.12345678987654321..., like Math.random()	};})(Math.random);//Now this can be called as default Math.random()